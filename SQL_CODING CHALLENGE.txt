
CREATION OF TABLE
---------------------

CREATE TABLE customers (
    customer_id INT PRIMARY KEY ,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    password VARCHAR(100) NOT NULL
);

CREATE TABLE products (
    product_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    description VARCHAR(50),
    stockQuantity INT NOT NULL
);

CREATE TABLE cart (
    cart_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id INT,
    product_id INT,
    quantity INT NOT NULL,
    Constraint cart_customer_id_fk FOREIGN KEY(customer_id) REFERENCES customers(customer_id),
    Constraint cart_product_id_fk FOREIGN KEY(product_id) REFERENCES products(product_id)
);

CREATE TABLE orders (
    order_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id INT,
    order_date DATE DEFAULT '2024-10-03',
    total_price DECIMAL(10, 2) NOT NULL,
    shipping_address VARCHAR(255) NOT NULL,
    Constraint order_customer_id_fk FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);

CREATE TABLE order_items (
    order_item_id INT PRIMARY KEY AUTO_INCREMENT,
    order_id INT,
    product_id INT,
    quantity INT NOT NULL,
    Constraint order_items_order_id_fk FOREIGN KEY (order_id) REFERENCES orders(order_id),
    Constraint order_items_product_id__fk FOREIGN KEY (product_id) REFERENCES products(product_id)
);












INSERTION OF TABLE
-------------------------

INSERT INTO customers (customer_id , name , email , password)
VALUES 
(1 ,'Aarav', 'aarav@example.com', 'password123'),
(2 ,'Isha', 'isha@example.com', 'password456'),
(3 ,'Rohan', 'rohan@example.com', 'password789'),
(4 ,'Sneha', 'sneha@example.com', 'password321');


INSERT INTO customers (customer_id , name, email, password)
VALUES (5 , 'Vikram', 'vikram@example.com', 'Password312');





INSERT INTO products (name, price, description, stockQuantity)
VALUES
('Laptop' , 800.00,'High-performance laptop',10),
('TV' , 900.00 , '4K TV' , 5),
('Tablet' , 300.00 , 'Portable Tab' , 20),
('Coffee Maker' , 50.00 , 'Automatic coffee maker' , 25);


INSERT INTO products (name, price, description, stockQuantity)
VALUES ('Gaming Mouse', 300.00, 'customizable buttons.', 25);




INSERT INTO cart (customer_id, product_id, quantity)
VALUES
(1, 1, 2),  
(2, 2, 1),
(3, 3, 1),  
(4, 4, 3); 


INSERT INTO orders (customer_id, order_date, total_price, shipping_address)
VALUES
(1, '2023-01-05', 1800.00, '123 MG Road , Gangtok'),
(2, '2023-02-10', 1600.00, '456 Park Road Patna'), 
(3, '2023-01-15', 1400.00, '789 CP, Delhi'), 
(4, '2023-04-20', 1200.00, '101 Big Bazar, Deoghar'); 



INSERT INTO order_items (order_id, product_id, quantity)
VALUES
(1, 1, 20),  
(2, 2, 10),  
(3, 3, 100),  
(4, 4, 300); 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

TASK

1. Update refrigerator product price to 800.

mysql> UPDATE products SET price = 800 WHERE product_id = 5;
Query OK, 1 row affected (0.01 sec)
Rows matched: 1  Changed: 1  Warnings: 0




2. Remove all cart items for a specific customer.

mysql> DELETE FROM cart WHERE customer_id = 1;
Query OK, 1 row affected (0.01 sec)




3. Retrieve Products Priced Below $100.

mysql> Select name , price FROM Products WHERE Price < 100;
+--------------+-------+
| name         | price |
+--------------+-------+
| Coffee Maker | 50.00 |
+--------------+-------+
1 row in set (0.00 sec)



4. Find Products with Stock Quantity Greater Than 5.

mysql> Select product_id , name FROM Products Where stockQuantity > 5;
+------------+--------------+
| product_id | name         |
+------------+--------------+
|          1 | Laptop       |
|          3 | Tablet       |
|          4 | Coffee Maker |
|          5 | Refrigerator |
+------------+--------------+
4 rows in set (0.00 sec)






5. Retrieve Orders with Total Amount Between $500 and $1000.

mysql> Select order_id FROM Orders WHERE total_price BETWEEN 500 AND 1000;
Empty set (0.01 sec)






6. Find Products which name end with letter ‘r’.

mysql> Select name from Products WHERE name LIKE '%r';
+--------------+
| name         |
+--------------+
| Coffee Maker |
| Refrigerator |
+--------------+
2 rows in set (0.01 sec)



7. Retrieve Cart Items for Customer 5.

mysql> select * from cart WHERE CUSTOMER_ID = 5;
+---------+-------------+------------+----------+
| cart_id | customer_id | product_id | quantity |
+---------+-------------+------------+----------+
|       6 |           5 |          5 |       80 |
+---------+-------------+------------+----------+
1 row in set (0.00 sec)






8. Find Customers Who Placed Orders in 2023.

mysql> SELECT DISTINCT name, email FROM customers C
    -> JOIN orders O ON C.customer_id = O.customer_id
    -> WHERE O.order_date LIKE '2023%';
+-------+-------------------+
| name  | email             |
+-------+-------------------+
| Aarav | aarav@example.com |
| Isha  | isha@example.com  |
| Rohan | rohan@example.com |
| Sneha | sneha@example.com |
+-------+-------------------+
4 rows in set (0.00 sec)






9. Determine the Minimum Stock Quantity for Each Product Category.

mysql> SELECT category, MIN(stockQuantity) AS min_stock FROM products
    -> GROUP BY category;
+-------------+-----------+
| category    | min_stock |
+-------------+-----------+
| ELECTRONICS |         5 |
| Computers   |        20 |
| Gadget      |        25 |
+-------------+-----------+
3 rows in set (0.00 sec)


10. Calculate the Total Amount Spent by Each Customer

mysql> SELECT c.customer_id,c.name, SUM(o.total_price) AS total_amt
    -> FROM customers c
    -> JOIN orders o ON c.customer_id = o.customer_id
    -> GROUP BY c.customer_id, c.name;
+-------------+-------+-------------+
| customer_id | name  | total_amt   |
+-------------+-------+-------------+
|           1 | Aarav |     1800.00 |
|           2 | Isha  |     1600.00 |
|           3 | Rohan |     1400.00 |
|           4 | Sneha |     1200.00 |
+-------------+-------+-------------+
4 rows in set (0.00 sec)






11. Find the Average Order Amount for Each Customer.

mysql> SELECT c.customer_id,c.name, AVG(o.total_price) AS AVG_spent
    -> FROM customers c
    -> JOIN orders o ON c.customer_id = o.customer_id
    -> GROUP BY c.customer_id, c.name;
+-------------+-------+-------------+
| customer_id | name  | AVG_spent   |
+-------------+-------+-------------+
|           1 | Aarav | 1800.000000 |
|           2 | Isha  | 1600.000000 |
|           3 | Rohan | 1400.000000 |
|           4 | Sneha | 1200.000000 |
+-------------+-------+-------------+
4 rows in set (0.01 sec)







12. Count the Number of Orders Placed by Each Customer.

mysql> SELECT c.customer_id, c.name, COUNT(o.order_id) AS number_of_orders
    -> FROM customers c
    -> LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.name;
+-------------+--------+------------------+
| customer_id | name   | number_of_orders |
+-------------+--------+------------------+
|           1 | Aarav  |                1 |
|           2 | Isha   |                1 |
|           3 | Rohan  |                1 |
|           4 | Sneha  |                1 |
|           5 | Vikram |                0 |
+-------------+--------+------------------+
5 rows in set (0.00 sec)







13. Find the Maximum Order Amount for Each Customer.



mysql> SELECT customer_id, MAX(total_price) AS max_order_amount
    -> FROM Orders
    -> GROUP BY customer_id;
+-------------+------------------+
| customer_id | max_order_amount |
+-------------+------------------+
|           1 |          1800.00 |
|           2 |          1600.00 |
|           3 |          1400.00 |
|           4 |          1200.00 |
+-------------+------------------+
4 rows in set (0.00 sec)






14. Get Customers Who Placed Orders Totaling Over $1000.

mysql> SELECT c.customer_id, c.name, SUM(o.total_price) AS total_spent FROM customers c
    -> JOIN orders o ON c.customer_id = o.customer_id
    -> GROUP BY c.customer_id, c.name
    -> HAVING SUM(o.total_price) > 1000;
+-------------+-------+-------------+
| customer_id | name  | total_spent |
+-------------+-------+-------------+
|           1 | Aarav |     1800.00 |
|           2 | Isha  |     1600.00 |
|           3 | Rohan |     1400.00 |
|           4 | Sneha |     1200.00 |
+-------------+-------+-------------+
4 rows in set (0.00 sec)








15. Subquery to Find Products Not in the Cart.

mysql> SELECT * FROM products WHERE product_id NOT IN (SELECT product_id FROM cart);
+------------+--------------+--------+-------------------------+---------------+-------------+
| product_id | name         | price  | description             | stockQuantity | CATEGORY    |
+------------+--------------+--------+-------------------------+---------------+-------------+
|          1 | Laptop       | 800.00 | High-performance laptop |            10 | ELECTRONICS |
|          6 | Gaming Mouse | 300.00 | customizable buttons.   |            25 | Computers   |
+------------+--------------+--------+-------------------------+---------------+-------------+
2 rows in set (0.01 sec)









16. Subquery to Find Customers Who Haven't Placed Orders.

mysql> SELECT * FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders);
+-------------+--------+--------------------+-------------+
| customer_id | name   | email              | password    |
+-------------+--------+--------------------+-------------+
|           5 | Vikram | vikram@example.com | Password312 |
+-------------+--------+--------------------+-------------+
1 row in set (0.00 sec)






17. Subquery to Calculate the Percentage of Total Revenue for a Product.






18. Subquery to Find Products with Low Stock.

mysql> SELECT product_id,name FROM products WHERE stockQuantity < (SELECT 10);
+------------+------+
| product_id | name |
+------------+------+
|          2 | TV   |
+------------+------+
1 row in set (0.00 sec)

(NOTE:- 10 IS HARDCODED VALUE)








19. Subquery to Find Customers Who Placed High-Value Orders.

mysql> SELECT name,customer_id FROM customers WHERE customer_id IN (
    ->     SELECT o.customer_id FROM orders o JOIN order_items oi ON  o.order_id = oi.order_id
    ->     GROUP BY o.customer_id, o.order_id
    ->     HAVING SUM(oi.quantity) > 20
    -> );
+-------+-------------+
| name  | customer_id |
+-------+-------------+
| Rohan |           3 |
| Sneha |           4 |
+-------+-------------+
2 rows in set (0.01 sec)








